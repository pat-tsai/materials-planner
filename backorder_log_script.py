# -*- coding: utf-8 -*-
"""BackorderedItemsCounter.ipynb
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/1zYme-ZcWj_FME6AJb8NbisSlt-o6ti8q
"""

import pandas as pd
import re


def aggregate_csv(file):
    # path = 'C:/Users/PatrickTsai/Documents/BO_report_app/resources/backorder_report.csv'
    df = pd.read_csv(file, dtype=str, encoding='utf-8')
    # df.head()
    #df = dataframe
    print(df)
    filtered_df = df.dropna(subset=['SMC Product ID'])

    customer_id = [cust_no for cust_no in filtered_df['Customer(Sold-to)']]
    orders = [{so: po} for so, po in zip(filtered_df['Order'], filtered_df['Customer PO'])]
    sales_ids = [id for id in filtered_df['Sales Representative']]

    sku_name_list = df['SMC Product ID'].dropna().tolist()
    sku_demand_qty_list = df['Order Quantity'].dropna().tolist()

    iter = 0

    sku_demand_qty_list_stripped = [qty.replace(' ', '').replace('.000', '') for qty in sku_demand_qty_list]
    sku_demand_qty_list_cleaned = [int(qty) for qty in sku_demand_qty_list_stripped]

    values = [0,'','','']
    output_dict = {}
    for i in range(len(sku_name_list)):
        sku_name = sku_name_list[i]
        sku_demand = sku_demand_qty_list_cleaned[i]
        sales_id = sales_ids[i]

        if (sku_name in output_dict):
            values = output_dict[sku_name]
            values[0] += (sku_demand)
            values[3] += ','
            values[3] += str(orders[i])
            if customer_id[i] not in values:
                values[1] += ','
                values[1] += (customer_id[i])
            if sales_id not in values:
                values[2] += ','
                values[2] += sales_id
        else:
            values[0] = (sku_demand)
            values[1] = (customer_id[i])
            values[2] = sales_id
            values[3] = str(orders[i])
        output_dict[sku_name] = values
        values = [0,'','','']

    cleaned_output_dict = {}
    for sku, value in output_dict.items():
        if re.search(r"((^EWCSC)|(^EXS16)|(^MC0\w*)|(^OS\w*)|^SFT(?:-\w+)+|^(SM\w*))", sku):
            print(f'omitting {sku}')
        else:
            cleaned_output_dict[sku] = value

    #print(cleaned_output_dict)
    output_df = pd.DataFrame.from_dict(cleaned_output_dict, orient='index', columns=['Demand Qty','Cust. ID','Sales ID','SO : PO'])
    #transposed_df = output_df.transpose()
    #output_csv = output_df.to_csv('output.csv')
    #output_csv = output_df.to_dict(orient='index')
    return output_df
  #  return cleaned_output_dict

if __name__ == '__main__':
    aggregate_csv()